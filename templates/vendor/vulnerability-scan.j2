{# METADATA:
id: vulnerability-scan
name: Vulnerability Scan
description: Run security vulnerability scans and remediation
estimated_duration: 90
risk_level: low
approval_required: false
dependencies: []
#}

# Vulnerability Scan - {{ region.upper() }}

## Overview

Vulnerability scanning procedure for **{{ azure_region }}** region.

### Scan Context

- **Target Region**: {{ region.upper() }} ({{ azure_region }})
- **Scan Type**: {{ scan_type | default('Full System Scan') }}
- **Scanner**: {{ scanner_tool | default('OpenVAS + Nessus') }}
- **Compliance**: {{ compliance_scan | default('PCI-DSS + SOC2') }}

## Security Scanning

### System Vulnerability Scan
```bash
# Run OpenVAS system scan
ansible {{ region }}_all -m shell -a "
  openvas-cli -u admin -w admin --xml='<get_tasks/>' > /tmp/scan-tasks.xml
"

# Run network vulnerability scan
ansible {{ region }}_scanner -m shell -a "
  nmap -sV -sC --script vuln {{ scanner_target | default('localhost') }}
"
```

### Application Security Scan
```bash
# Web application security scan
ansible {{ region }}_web -m shell -a "
  nikto -host http://localhost -output /tmp/nikto-scan.txt
"

# Database security scan
ansible {{ region }}_db -m shell -a "
  mysql_secure_installation --use-default
"
```

### Container Security Scan
```bash
# Scan container images for vulnerabilities
ansible {{ region }}_app -m shell -a "
  docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
  aquasec/trivy image webapp:latest
"
```

## Vulnerability Remediation

### Critical Patches
```bash
# Apply critical security patches
ansible {{ region }}_all -m yum -a "
  name='*'
  state=latest
  security=yes
  severity=Critical
"
```

### Configuration Hardening
```bash
# Apply security hardening
ansible {{ region }}_all -m template -a "
  src=hardening.conf.j2
  dest=/etc/security/hardening.conf
"

# Update SSH configuration
ansible {{ region }}_all -m lineinfile -a "
  dest=/etc/ssh/sshd_config
  regexp='^PermitRootLogin'
  line='PermitRootLogin no'
"
```

## Scan Report Generation

### Vulnerability Report
```bash
# Generate vulnerability report
ansible {{ region }}_scanner -m template -a "
  src=vuln-report.j2
  dest=/tmp/vulnerability-report-{{ region }}-{{ ansible_date_time.date }}.html
"
```

### Compliance Report
```bash
# Generate compliance scan report
ansible {{ region }}_all -m shell -a "
  oscap xccdf eval --profile {{ compliance_profile | default('pci-dss') }} \
  --results /tmp/compliance-results.xml \
  /usr/share/xml/scap/ssg/content/ssg-rhel8-ds.xml
"
```

---

**Generated**: {{ generated_at }}  
**Template**: {{ template_source }}  
**Region**: {{ region.upper() }} ({{ azure_region }})