{# METADATA:
id: disaster-recovery-test
name: Disaster Recovery Test
description: Test disaster recovery procedures and failover
estimated_duration: 120
risk_level: high
approval_required: true
dependencies: ["backup-config"]
#}

# Disaster Recovery Test - {{ region.upper() }}

## Overview

Disaster recovery test procedure for **{{ azure_region }}** region.

### DR Test Context

- **Target Region**: {{ region.upper() }} ({{ azure_region }})
- **DR Region**: {{ dr_region | default('wus2') }}
- **Test Type**: {{ test_type | default('Failover Test') }}
- **RTO Target**: {{ rto_target | default('4 hours') }}
- **RPO Target**: {{ rpo_target | default('1 hour') }}

## Pre-Test Preparation

### Backup Verification
```bash
# Verify latest backups exist
ansible {{ region }}_db -m shell -a "
  find /backup -name 'db-*.sql.gz' -mtime -1
"

# Test backup restoration
ansible {{ dr_region | default('wus2') }}_db -m shell -a "
  gunzip -c /backup/db-$(date +%Y%m%d).sql.gz | mysql test_restore_db
"
```

### DR Environment Check
```bash
# Verify DR infrastructure
ansible {{ dr_region | default('wus2') }}_all -m ping

# Check DR service status
ansible {{ dr_region | default('wus2') }}_web -m systemd -a "name=nginx state=started"
ansible {{ dr_region | default('wus2') }}_db -m systemd -a "name=mysql state=started"
```

## Failover Test

### DNS Failover
```bash
# Update DNS to point to DR region
az network dns record-set a update \
  --resource-group {{ resource_group }} \
  --zone-name {{ dns_zone | default('example.com') }} \
  --name www \
  --set aRecords[0].ipv4Address={{ dr_web_ip | default('10.1.1.10') }}
```

### Application Failover
```bash
# Start services in DR region
ansible {{ dr_region | default('wus2') }}_app -m systemd -a "name=application state=started"

# Configure load balancer for DR
ansible {{ dr_region | default('wus2') }}_lb -m template -a "
  src=dr-nginx.conf.j2
  dest=/etc/nginx/sites-available/default
"
ansible {{ dr_region | default('wus2') }}_lb -m systemd -a "name=nginx state=restarted"
```

### Data Synchronization
```bash
# Sync latest data to DR region
ansible {{ region }}_db -m shell -a "
  mysqldump --all-databases | gzip > /tmp/failover-backup.sql.gz
"

ansible {{ dr_region | default('wus2') }}_db -m shell -a "
  gunzip -c /tmp/failover-backup.sql.gz | mysql
"
```

## Test Validation

### Service Availability
```bash
# Test application accessibility
ansible {{ dr_region | default('wus2') }}_web -m uri -a "
  url=http://localhost/health
  status_code=200
"

# Test database connectivity
ansible {{ dr_region | default('wus2') }}_app -m shell -a "
  mysql -e 'SELECT 1' 2>/dev/null && echo 'DB OK' || echo 'DB FAIL'
"
```

### Performance Validation
```bash
# Run performance tests in DR region
ansible {{ dr_region | default('wus2') }}_web -m shell -a "
  ab -n 100 -c 10 http://localhost/ | grep 'Requests per second'
"
```

## Failback Procedure

### DNS Restoration
```bash
# Restore DNS to primary region
az network dns record-set a update \
  --resource-group {{ resource_group }} \
  --zone-name {{ dns_zone | default('example.com') }} \
  --name www \
  --set aRecords[0].ipv4Address={{ primary_web_ip | default('10.0.1.10') }}
```

### Service Restoration
```bash
# Restore services in primary region
ansible {{ region }}_all -m systemd -a "name=application state=started"
ansible {{ region }}_web -m systemd -a "name=nginx state=started"
```

## Test Report

### DR Test Results
- **Test Duration**: {{ test_duration | default('TBD') }}
- **RTO Achieved**: {{ rto_achieved | default('TBD') }}
- **RPO Achieved**: {{ rpo_achieved | default('TBD') }}
- **Issues Found**: {{ issues_found | default('TBD') }}
- **Recommendations**: {{ recommendations | default('TBD') }}

---

**Generated**: {{ generated_at }}  
**Template**: {{ template_source }}  
**Region**: {{ region.upper() }} ({{ azure_region }})