# Agent Upgrade Procedure - {{ region.upper() }}

## Overview

This procedure outlines the steps to upgrade monitoring agents in the **{{ azure_region }}** region ({{ region_code }}).

### Environment Details

- **Region**: {{ region.upper() }} ({{ azure_region }})
- **ADO Organization**: {{ ado_organization }}
- **Project**: {{ ado_project }}
- **Environment**: {{ environment }}
- **Resource Group**: {{ resource_group }}
- **Key Vault**: {{ key_vault }}
{% if is_lea_region %}
- **Early Access Region**: Yes - Preview features enabled
{% endif %}

## Prerequisites

1. Access to {{ ado_organization }} Azure DevOps organization
2. Permissions to {{ environment }} environment
3. Network connectivity to {{ azure_region }} region
4. Service principal access to {{ resource_group }}

## Agent Configuration

### Current Version
- **Version**: {{ agent_version | default('v2.1.5') }}
- **Configuration Path**: {{ config_path | default('/opt/monitoring/config') }}
- **Log Level**: {{ log_level | default('INFO') }}

### Target Hosts
{% if target_group == 'monitoring' %}
- Monitoring servers in {{ region }}_monitoring group
{% elif target_group == 'web' %}
- Web servers in {{ region }}_web group  
{% elif target_group == 'db' %}
- Database servers in {{ region }}_db group
{% else %}
- All servers in {{ region }} region
{% endif %}

## Procedure Steps

### Step 1: Pre-Upgrade Validation

```bash
# Verify current agent status
ansible {{ region }}_{{ target_group | default('monitoring') }} -m shell -a "systemctl status monitoring-agent"

# Check agent version
ansible {{ region }}_{{ target_group | default('monitoring') }} -m shell -a "monitoring-agent --version"

# Verify connectivity to monitoring endpoints
ansible {{ region }}_{{ target_group | default('monitoring') }} -m shell -a "curl -f {{ monitoring_endpoint | default('https://monitoring.example.com/health') }}"
```

### Step 2: Configuration Update

The Ansible playbook will update the agent configuration with the following settings:

```yaml
# Configuration to be applied
agent_config:
  version: "{{ target_version | default('v2.1.6') }}"
  region: "{{ region }}"
  environment: "{{ environment }}"
  log_level: "{{ log_level | default('INFO') }}"
  endpoints:
    primary: "{{ primary_endpoint | default('monitoring-' + region + '.example.com') }}"
    backup: "{{ backup_endpoint | default('monitoring-backup-' + region + '.example.com') }}"
  retention_days: {{ retention_days | default(30) }}
{% if custom_config %}
  custom_settings:
{% for key, value in custom_config.items() %}
    {{ key }}: {{ value }}
{% endfor %}
{% endif %}
```

### Step 3: Azure DevOps Pipeline Execution

The upgrade process will trigger the following pipeline:

- **Pipeline ID**: {{ pipeline_id }}
- **Organization**: {{ ado_organization }}
- **Project**: {{ ado_project }}
- **Environment**: {{ environment }}

### Step 4: Post-Upgrade Verification

```bash
# Verify new agent version
ansible {{ region }}_{{ target_group | default('monitoring') }} -m shell -a "monitoring-agent --version"

# Check service status
ansible {{ region }}_{{ target_group | default('monitoring') }} -m shell -a "systemctl is-active monitoring-agent"

# Validate configuration
ansible {{ region }}_{{ target_group | default('monitoring') }} -m shell -a "monitoring-agent --validate-config"

# Test connectivity
ansible {{ region }}_{{ target_group | default('monitoring') }} -m shell -a "monitoring-agent --test-connection"
```

## Success Criteria

The upgrade is considered successful when:

- [ ] All agents report new version: {{ target_version | default('v2.1.6') }}
- [ ] All agents are in active/running state
- [ ] Configuration validation passes on all hosts
- [ ] Connectivity tests pass to all endpoints
- [ ] No error alerts in monitoring dashboard
- [ ] Azure DevOps pipeline completes successfully

---

**Generated**: {{ generated_at }}  
**Template**: {{ template_source }}  
**Region**: {{ region.upper() }} ({{ azure_region }})